import{_ as s,c as a,o as l,a as n}from"./app.f81c08f0.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{"sidebar":"auto"},"headers":[{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[]},{"level":2,"title":"启动","slug":"启动","link":"#启动","children":[]},{"level":2,"title":"数据结构","slug":"数据结构","link":"#数据结构","children":[]},{"level":2,"title":"String","slug":"string","link":"#string","children":[]},{"level":2,"title":"List","slug":"list","link":"#list","children":[]}],"relativePath":"Java/Redis/index.md","lastUpdated":1670582276000}'),e={name:"Java/Redis/index.md"},p=n(`<h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><p><a href="https://github.com/tporadowski/redis/releases" target="_blank" rel="noreferrer">Redis 下载</a></p><h2 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">redis-server.exe</span></span>
<span class="line"><span style="color:#A6ACCD;">redis-cli.exe -h 127.0.0.1 -p 6379</span></span>
<span class="line"></span></code></pre></div><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-hidden="true">#</a></h2><p><code>Redis</code>有五种基本数据结构</p><ul><li>String</li><li>Hash</li><li>List</li><li>Set</li><li>SortedSet</li></ul><p><code>Redis</code>其它数据结构</p><ul><li>HyperLogLog</li><li>Geo</li><li>Pub/Sub</li></ul><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-hidden="true">#</a></h2><p>设值</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> test_data this.is.test.data</span></span>
<span class="line"></span></code></pre></div><p>取值</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">get test_data</span></span>
<span class="line"></span></code></pre></div><p>获取值长度</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">strlen test_data</span></span>
<span class="line"></span></code></pre></div><p>获取子串</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">getrange test_data 5 10</span></span>
<span class="line"></span></code></pre></div><p>覆盖子串(注意是覆盖不是插入)</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">setrange test_data 5 notis.tes</span></span>
<span class="line"></span></code></pre></div><p>追加字串</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">append test_data .foo</span></span>
<span class="line"></span></code></pre></div><p>如果字符串内容是一个整数，还是以当计数器使用</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> test_data 100</span></span>
<span class="line"><span style="color:#A6ACCD;">incrby test_data 200 // 300</span></span>
<span class="line"><span style="color:#A6ACCD;">decrby test_data 100 // 200</span></span>
<span class="line"><span style="color:#A6ACCD;">incr test_data // 201</span></span>
<span class="line"><span style="color:#A6ACCD;">decr test_data // 200</span></span>
<span class="line"></span></code></pre></div><p>过期与删除<br> 字符串可以使用<code>del</code>主动删除，可以使用<code>expire</code>指令设置过期时间(被动删除)。可以使用<code>ttl</code>指令获取字符串离过期剩余时间。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">expire test_data 60 // 单位s</span></span>
<span class="line"><span style="color:#A6ACCD;">ttl test_data // -2 变量不存在 -1 没有设置过期时间</span></span>
<span class="line"><span style="color:#A6ACCD;">del test_data // 1 成功 0 失败</span></span>
<span class="line"><span style="color:#A6ACCD;">get test_data // nil</span></span>
<span class="line"></span></code></pre></div><h2 id="list" tabindex="-1">List <a class="header-anchor" href="#list" aria-hidden="true">#</a></h2><p>Redis 将列表数据结构命名为 List 而不是 Array ,因为列表存储结构用的是链表(双向链表)而不是数组。<br> 随机定位性较差，首尾插入删除性能较优。使用时一定要注意链表相关操作的时间复杂度。<br> List 可以使用负下标。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;"># 右进左出  先进后出 堆栈</span></span>
<span class="line"><span style="color:#A6ACCD;">rpush test_data go // 1</span></span>
<span class="line"><span style="color:#A6ACCD;">rpush test_data java python // 3</span></span>
<span class="line"><span style="color:#A6ACCD;">lpop test_data // go</span></span>
<span class="line"><span style="color:#A6ACCD;">lpop test_data // java</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 右进右出 先进先出 队列</span></span>
<span class="line"><span style="color:#A6ACCD;">rpush test_data go // 1</span></span>
<span class="line"><span style="color:#A6ACCD;">rpush test_data java python // 3</span></span>
<span class="line"><span style="color:#A6ACCD;">rpop test_data // python</span></span>
<span class="line"><span style="color:#A6ACCD;">rpop test_data // java</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>获取长度</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">llen test_data</span></span>
<span class="line"></span></code></pre></div><p>随机读取</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">lindex test_data 1 2</span></span>
<span class="line"></span></code></pre></div><p>修改元素</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">lset test_data 0 javascript</span></span>
<span class="line"></span></code></pre></div><p>插入元素(linsert可以指定方向before/after) 插入元素不是通过下标(在分布式环境下，列表元素频繁变动)，而是通过指定值插入</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">linsert test_data before javascript ruby</span></span>
<span class="line"></span></code></pre></div><p>删除元素 也不是通过指定下标的方式，而是需要指定删除最大个数以及元素的值</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">lrem test_data 3 ruby</span></span>
<span class="line"></span></code></pre></div><p>定长列表</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki"><code><span class="line"><span style="color:#A6ACCD;">ltrim test_data 1 100</span></span>
<span class="line"></span></code></pre></div><p>快速列表 @TODO</p>`,42),t=[p];function c(o,i,d,r,C,h){return l(),a("div",null,t)}const u=s(e,[["render",c]]);export{A as __pageData,u as default};
